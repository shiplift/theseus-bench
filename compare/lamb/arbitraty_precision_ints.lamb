#!/usr/bin/env lamb
#Aribtraty precision integers via binary representation. LSB( … ( … ( …  MSB())))

print_int ≔ ⟪print_int⟫
- ≔ ⟪minus_int⟫
+ ≔ ⟪plus_int⟫
/ ≔ ⟪div_int⟫
% ≔ ⟪mod_int⟫
* ≔ ⟪mult_int⟫



p ≔ ⟪print_result_string⟫
clock ≔ ⟪clock⟫
time$cont4 ≔ λ.
             1. res, _           ↦ res
time$cont3 ≔ λ.
             1. res, diff        ↦ μ(time$cont4, res, μ(p, diff))
time$cont2 ≔ λ.
             1. res, start, stop ↦ μ(time$cont3,
                                     res,
                                     μ(⟪minus_float⟫, stop, start))
time$cont1 ≔ λ.
             1. res, start       ↦ μ(time$cont2, res, start, μ(clock))
time$cont0 ≔ λ.
             1. fun, arg, start  ↦ μ(time$cont1, μ(fun, arg), start)
time       ≔ λ.
             1. fun, arg         ↦ μ(time$cont0, fun, arg, μ(clock))

# Eon(): end of a number

arpn-as-int ≔ λ. 
              1. Eon(),   Result, _    ↦ Result
              2. One(X),  Result, Rank ↦ μ(arpn-as-int, X, μ(+, Result, Rank), μ(*, 2, Rank))
              3. Zero(X), Result, Rank ↦ μ(arpn-as-int, X, Result, μ(*, 2, Rank))

arbitrary-precision-number-as-int ≔ λ. 1. X ↦ μ(arpn-as-int, X, 0, 1)

arpn-as-bint ≔ λ. 
              1. Eon(),   Result, _    ↦ Result
              2. One(X),  Result, Rank ↦ μ(arpn-as-bint, X, μ(⟪plus_bignumber⟫, Result, Rank), μ(⟪mult_bignumber⟫, μ(⟪int_to_bignumber⟫, 2), Rank))
              3. Zero(X), Result, Rank ↦ μ(arpn-as-bint, X, Result, μ(⟪mult_bignumber⟫, μ(⟪int_to_bignumber⟫, 2), Rank))

arbitrary-precision-number-as-bint ≔ λ. 1. X ↦ μ(arpn-as-bint, X,
                                                  μ(⟪int_to_bignumber⟫, 0),
                                                  μ(⟪int_to_bignumber⟫, 1))

#
# Trace ME
#
#
int-as-arpn ≔ λ. 
              1. 0,      1 ↦ One(Eon())
              2. 0,      0 ↦ Zero(Eon())
              3. Number, 1 ↦ One(μ(int-as-arpn, μ(/, Number, 2), μ(%, Number, 2)))
              4. Number, 0 ↦ Zero(μ(int-as-arpn, μ(/, Number, 2), μ(%, Number, 2)))
int-as-arbitrary-precision-number ≔ λ. 1. X ↦ μ(int-as-arpn, μ(/, X, 2), μ(%, X, 2))

+.$0 ≔ λ.
       0. Eon(),    Eon(),  X ↦ X

       1. Eon(),   Zero(Y), Zero(_) ↦ Zero(μ(+.$0, Eon(), Y, Zero(Eon())))
       2. Zero(X),  Eon(),  Zero(_) ↦ Zero(μ(+.$0, X, Eon(), Zero(Eon())))
       3. Eon(),   Zero(Y),  One(_) ↦  One(μ(+.$0, Eon(), Y, Zero(Eon())))
       4. Zero(X),  Eon(),   One(_) ↦  One(μ(+.$0, X, Eon(), Zero(Eon())))

       5. Eon(),    One(Y), Zero(_) ↦  One(μ(+.$0, Eon(), Y, Zero(Eon())))
       6.  One(X),  Eon(),  Zero(_) ↦  One(μ(+.$0, X, Eon(), Zero(Eon())))
       7. Eon(),    One(Y),  One(_) ↦ Zero(μ(+.$0, Eon(), Y,  One(Eon())))
       8.  One(X),  Eon(),   One(_) ↦ Zero(μ(+.$0, X, Eon(),  One(Eon())))

       9. Zero(X), Zero(Y), Zero(_) ↦ Zero(μ(+.$0, X, Y, Zero(Eon())))
      10. Zero(X),  One(Y), Zero(_) ↦  One(μ(+.$0, X, Y, Zero(Eon())))
      11.  One(X), Zero(Y), Zero(_) ↦  One(μ(+.$0, X, Y, Zero(Eon())))
      12.  One(X),  One(Y), Zero(_) ↦ Zero(μ(+.$0, X, Y,  One(Eon())))

      13. Zero(X), Zero(Y),  One(_) ↦  One(μ(+.$0, X, Y, Zero(Eon())))
      14. Zero(X),  One(Y),  One(_) ↦ Zero(μ(+.$0, X, Y,  One(Eon())))
      15.  One(X), Zero(Y),  One(_) ↦ Zero(μ(+.$0, X, Y,  One(Eon())))
      16.  One(X),  One(Y),  One(_) ↦  One(μ(+.$0, X, Y,  One(Eon())))
      
+. ≔ λ. 1. X, Y ↦ μ(+.$0, X, Y, Zero(Eon()))

p_$0 ≔ λ. 1. X, _ ↦ X
p_ ≔ λ. 1. X ↦ μ(p_$0, X, μ(print_int, μ(arbitrary-precision-number-as-int, X)))
p__ ≔ λ. 1. X ↦ μ(p_$0, X, μ(print_int, X))

*. ≔ λ.
     1. Zero(Eon()), X ↦ Zero(Eon())
     2. X, Zero(Eon()) ↦ Zero(Eon())
     3.  One(Eon()), X ↦ X
     4. X,  One(Eon()) ↦ X
     5. X,      One(Y) ↦ μ(+., X, μ(*., Zero(X), Y))
     6. X,     Zero(Y) ↦ μ(*., Zero(X), Y)

#μ(int-as-arbitrary-precision-number, 2)
# μ(print_int,
#   μ(arbitrary-precision-number-as-int,
#     Eon()))
# 
# μ(print_int,
#   μ(arbitrary-precision-number-as-int,
#     Zero(Eon())))
# 
# μ(print_int,
#   μ(arbitrary-precision-number-as-int,
#     One(Eon())))
# 
# # 1011 -> 1(1(0(1())))
# μ(print_int,
#   μ(arbitrary-precision-number-as-int,
#     One(One(Zero(One(Eon()))))))
# 
# # Wolfram: (next prime (2^19 - 2^17) )
# # => 393241
# # => 110 0000 0000 0001 1001
# # => 1(0(0(1(1(0(0(0(0(0(0(0(0(0(0(0(0(1(1()))))))))))))))))))
# μ(print_int,
#   μ(arbitrary-precision-number-as-int,
#     One(Zero(Zero(One(One(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(One(One(Eon())))))))))))))))))))))
# μ(int-as-arbitrary-precision-number, 393241)))

# => 786483
# μ(arbitrary-precision-number-as-int,
#  μ(+.,
#    μ(int-as-arbitrary-precision-number, 32793),
#    μ(int-as-arbitrary-precision-number, 393242)))
# μ(+.,
#   One(Zero(Zero(One(One(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(One(Eon())))))))))))))))),
#   Zero(One(Zero(One(One(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(Zero(One(One(Eon()))))))))))))))))))))

main ≔ λ. 1. Box(a, b) ↦ μ(*., a, b)

widen$0 ≔ λ.
          1. m, 0, _ ↦ m
          2. m, n, 1 ↦ μ(widen$0, One(m), μ(-, n, 1), 0)
          3. m, n, 0 ↦ μ(widen$0, Zero(m), μ(-, n, 1), 1)

widen ≔ λ. 1. X, Y ↦ μ(widen$0, X, Y, 0)


# 200000000000
num ≔ μ(λ.
        1. nil()      ↦ 400
        2. cons(h, _) ↦  μ(/, μ(⟪strtol⟫, h), 40000), arguments)
μ(⟪print_bignumber⟫,
  μ(arbitrary-precision-number-as-bint,
    μ(time, main, Box(μ(widen, μ(int-as-arbitrary-precision-number, 47), num),
                      μ(widen, μ(int-as-arbitrary-precision-number, 53), μ(+, num, 17))))))
