#!/usr/bin/env lamb

p ≔ ⟪print_result_string⟫
clock ≔ ⟪clock⟫
# type E | F.

# type Nil, Cons(,)
cons ≔ λ. 1. A, B ↦ Cons(A, B)
head ≔ λ. 1. Cons(A, B) ↦ A
tail ≔ λ. 1. Cons(A, B) ↦ B

make_list$aux ≔ λ.
                1. acc, 0 ↦ acc
                2. acc, n ↦ μ(make_list$aux,
                              μ(cons, E(), acc),
                              μ(⟪minus_int⟫, n, 1))
make_list ≔ λ. 1. n ↦ μ(make_list$aux, Nil(), n)


time$cont4 ≔ λ.
             1. res, _           ↦ res
time$cont3 ≔ λ.
             1. res, diff        ↦ μ(time$cont4, res, μ(p, diff))
time$cont2 ≔ λ.
             1. res, start, stop ↦ μ(time$cont3,
                                     res,
                                     μ(⟪minus_float⟫, stop, start))
time$cont1 ≔ λ.
             1. res, start       ↦ μ(time$cont2, res, start, μ(clock))
time$cont0 ≔ λ.
             1. fun, arg, start  ↦ μ(time$cont1, μ(fun, arg), start)
time       ≔ λ.
             1. fun, arg         ↦ μ(time$cont0, fun, arg, μ(clock))

f ≔ λ.
    1. _,    Nil(),     _ ↦ Nil()
    2. pred, Cons(h,t), 1 ↦ Cons(h, μ(f, pred, t, Nil()))
    3. pred, Cons(h,t), 0 ↦ μ(f, pred, t, Nil())
    4. pred, Cons(h,t), _ ↦ μ(f, pred, Cons(h, t), μ(pred, h))
filter ≔ λ. 1. pred, lst ↦ μ(f, pred, lst, Nil())

flt ≔ λ.
      1. E() ↦ 1
      2. F() ↦ 0

main$cont ≔ λ. 1. Box(fun, l) ↦ μ(filter, fun, l)

num ≔ μ(λ.
        1. nil()      ↦ 5000000
        2. cons(h, _) ↦ μ(⟪strtol⟫, h), arguments)
l ≔ μ(make_list, num)
# l ≔ μ(make_list, 20000000)
μ(time, main$cont, Box(flt, l))