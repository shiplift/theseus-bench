#!/usr/bin/env lamb

currentmilliseconds ≔ ⟪currentmilliseconds⟫
print_int ≔ ⟪print_int⟫
- ≔ ⟪-⟫
+ ≔ ⟪+⟫
/ ≔ ⟪/⟫
* ≔ ⟪*⟫


p ≔ ⟪print_result_string⟫
clock ≔ ⟪clock⟫

time$cont4 ≔ λ.
             1. res, _           ↦ res
time$cont3 ≔ λ.
             1. res, diff        ↦ μ(time$cont4, res, μ(p, diff))
time$cont2 ≔ λ.
             1. res, start, stop ↦ μ(time$cont3,
                                     res,
                                     μ(⟪minus_float⟫, stop, start))
time$cont1 ≔ λ.
             1. res, start       ↦ μ(time$cont2, res, start, μ(clock))
time$cont0 ≔ λ.
             1. fun, arg, start  ↦ μ(time$cont1, μ(fun, arg), start)
time       ≔ λ.
             1. fun, arg         ↦ μ(time$cont0, fun, arg, μ(clock))


###############################################################################

kMinTreeDepth ≔ 3

MakeTree ≔ λ.
           1. 0      ↦ Leaf(1)
           2. iDepth ↦ Node(μ(MakeTree, μ(-, iDepth, 1)),
                            1,
                            μ(MakeTree, μ(-, iDepth, 1)))

#debug
# p_$0 ≔ λ. 1. X, _ ↦ X
# p_ ≔ λ. 1. X ↦ μ(p_$0, X, μ(print_int, X))

# << ≔ λ.
#      1. X, 0 ↦ X
#      2. X, Y ↦ μ(<<, μ(⟪mult_int⟫, X, 2), μ(-, Y, 1))
<< ≔ ⟪lsl⟫

iter$0 ≔ λ.
         1. _, _, _, _, _, 0     ↦ nil()
         2. i, niter, d, _, _, _ ↦ μ(iter$0, μ(+, 1, i), niter, d,
                                     μ(MakeTree, d), μ(MakeTree, d),
                                     μ(-, niter, i))
iter ≔ λ. 1. i, niter, d ↦ μ(iter$0, i, niter, d, nil(), nil(), niter)

niter ≔ λ. 1. max_depth, d  ↦ μ(<<, 1, μ(-, max_depth, d))
  
loop_depths$0 ≔ λ. 
                1. _, _,         _,       _, 0 ↦ nil()
                2. d, max_depth, nil(),   _, _ ↦ μ(loop_depths$0,
                                                   d, max_depth, μ(niter, max_depth, d),
                                                   nil(), nil())
                3. d, max_depth, numIter, _, _ ↦ μ(loop_depths$0,
                                                   μ(+, 1, d), max_depth, μ(niter, max_depth, d),
                                                   μ(iter, 1, numIter, d), μ(-, max_depth, d))

loop_depths ≔ λ. 1. d, max_depth ↦ μ(loop_depths$0, d, max_depth, nil(), nil(), nil())

check$0 ≔ λ.
          1. Leaf(X),       nil() ↦ 1
          2. Node(l, X, r), nil() ↦ μ(check$0, μ(check$0, l, nil()), r)
          3. _,             r     ↦ μ(check$0, r, nil())
check ≔ λ. 1. X ↦ μ(check$0, X, nil())

tree$cont3 ≔ λ.
             1. _, longlived ↦ μ(check, longlived)

tree$cont2 ≔ λ.
             1. max_depth, longlived ↦ μ(tree$cont3, μ(loop_depths, kMinTreeDepth, max_depth), longlived)

tree$cont1 ≔ λ.
             1. max_depth, _ ↦ μ(tree$cont2, max_depth, μ(MakeTree, max_depth))

tree$cont0 ≔ λ.
             1. stretch, max_depth ↦ μ(tree$cont1, max_depth, μ(MakeTree, stretch))

tree ≔ λ.
       1. num ↦  μ(tree$cont0, μ(+, 1, num), num)

treenum ≔ λ.
          1. nil()      ↦ 18
          2. cons(h, _) ↦ μ(+, μ(-, kMinTreeDepth, 1), μ(/, μ(⟪strtol⟫, h), 1000000))
num ≔ μ(treenum, arguments)
μ(time, tree, num)