#!/usr/bin/env lamb

p ≔ ⟪print_result_string⟫
clock ≔ ⟪clock⟫
gctime ≔ ⟪gctime⟫

# type E.

# type Nil, Cons(,)
cons ≔ λ. A, B ↦ Cons(A, B)
head ≔ λ. Cons(A, B) ↦ A
tail ≔ λ. Cons(A, B) ↦ B

make_list$aux ≔ λ.
                1. acc, 0 ↦ acc
                2. acc, n ↦ μ(make_list$aux,
                              μ(cons, E(), acc),
                              μ(⟪minus_int⟫, n, 1))
make_list ≔ λ. n ↦ μ(make_list$aux, Nil(), n)


time$cont6 ≔ λ. res, _                ↦ res
time$cont5 ≔ λ. res, diff, gcdiff     ↦ μ(time$cont6,
                                          res,
                                          μ(p, diff, diff, gcdiff))
time$cont4 ≔ λ. res, gc1, t1, t2, gc2 ↦ μ(time$cont5,
                                          res,
                                          μ(⟪minus_float⟫, t2, t1),
                                          μ(⟪minus_float⟫, gc2, gc1))
time$cont3 ≔ λ. res, gc1, t1, t2      ↦ μ(time$cont4,
                                          res,
                                          gc1, t1, t2, μ(gctime))
time$cont2 ≔ λ. res, gc1, t1          ↦ μ(time$cont3, res, gc1, t1, μ(clock))
time$cont1 ≔ λ. fun, arg, gc1, t1     ↦ μ(time$cont2, μ(fun, arg), gc1, t1)
time$cont0 ≔ λ. fun, arg, gc1         ↦ μ(time$cont1, fun, arg, gc1, μ(clock))
time       ≔ λ. fun, arg              ↦ μ(time$cont0, fun, arg, μ(gctime))

# lamb_reverse$aux ≔ λ.
#                    1. acc, nil()      ↦ acc
#                    2. acc, cons(h, t) ↦ μ(lamb_reverse$aux, cons(h, acc), t)

# lamb_reverse ≔ λ. 1. l ↦ μ(lamb_reverse$aux, nil(), l)

# lamb_append$aux ≔ λ.
#                    1. acc, nil()      ↦ acc
#                    2. acc, cons(h, t) ↦ μ(lamb_append$aux, cons(h, acc), t)
# lamb_append ≔ λ. 1. l, m ↦ μ(lamb_append$aux, m, μ(lamb_reverse, l))


lamb_append ≔ λ.
              1. nil(), B      ↦ B
              2. cons(h, t), B ↦ cons(h, μ(lamb_append, t, B))
main$cont ≔ λ. 1. Box(l, m) ↦ μ(lamb_append, l, m)

num ≔ μ(λ.
        1. nil()      ↦ 10000000
        2. cons(h, _) ↦ μ(⟪strtol⟫, h), arguments)
l ≔ μ(make_list, num)
m ≔ μ(make_list, num)
μ(time, main$cont, Box(l, m))